dataSubset[1, 1]
}
best("TX", "heart attack")
debug(best)
best("TX", "heart attack")
View(dataSubset)
View(outcome)
dataSubset <- outcome[which(data$State == "TX"), c(2, 7, 11)]
dataSubset <- outcome[which(outcome$State == "TX"), c(2, 7, 11)]
head(dataSubset)
best <- function(state, outcome) {
## Set some values to be used below
hospitalNameIndex <- 2
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[which(data$State == state), c(hospitalNameIndex, dataIndex)]
dataSubset[, 2] <- as.numeric(dataSubset[, 2])
dataSubset <- dataSubset[order(c(dataSubset[,2], dataSubset[,2])),]
dataSubset[1, 1]
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/Documents/RProgrammingCourseA3/best.R')
best("TX", "heart attack")
source('~/Documents/RProgrammingCourseA3/best.R')
best("TX", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
submit()
submit()
submit()
submit()
nrow(x)
x[5000,1]
View(outcome)
data <- outomce
data <- outcome
rm(outcome)
dataSubset <- data[which(data$State == "TX"), c(2, 11)]
head(dataSubset)
dataSubset <- data[which(data$State == "NY"), c(2, 11)]
head(dataSubset)
dataSubset <- data[which(data$State == "TX"), c(2, 11)]
dataSubset <- data[which(data$State == "TX"), c(2, 17)]
head(dataSubset)
dataSubsetOrdered <- dataSubset[order(c(dataSubset[,2], dataSubset[,1])),]
head(dataSubsetOrdered)
rankHospital <- function(state, outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[which(data$State == state), c(hospitalNameIndex, dataIndex)]
dataSubset[, 2] <- suppressWarnings(as.numeric(dataSubset[, 2]))
dataSubsetNoNA <- dataSubset[which(is.na(data[, 2] == FALSE)),]
#         hospitalCount <- nrow(dataSubsetNoNA)
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(c(dataSubset[,2], dataSubset[,1])),]
if(num == "best") {
rowIndex = 1
} elseif(num == "worst") {
rowIndex nrow(dataSubsetNoNAOrdered)
} else {
rowIndex = num
}
dataSubsetNoNAOrdered[rowIndex, 1]
}
rankHospital <- function(state, outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[which(data$State == state), c(hospitalNameIndex, dataIndex)]
dataSubset[, 2] <- suppressWarnings(as.numeric(dataSubset[, 2]))
dataSubsetNoNA <- dataSubset[which(is.na(data[, 2] == FALSE)),]
#         hospitalCount <- nrow(dataSubsetNoNA)
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(c(dataSubset[,2], dataSubset[,1])),]
if(num == "best") {
rowIndex <- 1
} else if(num == "worst") {
rowIndex <- nrow(dataSubsetNoNAOrdered)
} else {
rowIndex <- num
}
dataSubsetNoNAOrdered[rowIndex, 1]
}
source('~/Documents/RProgrammingCourseA3/rankHospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Documents/RProgrammingCourseA3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
debug(rankhospital)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source('~/Documents/RProgrammingCourseA3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Documents/RProgrammingCourseA3/rankhospital.R')
debug(rankhospital)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source('~/Documents/RProgrammingCourseA3/rankhospital.R')
debug(rankhospital)
rankhospital("TX", "heart failure", 4)
View(dataSubsetNoNA)
View(dataSubset)
debugSource('~/Documents/RProgrammingCourseA3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
View(dataSubsetNoNA)
View(dataSubsetNoNAOrdered)
debugSource('~/Documents/RProgrammingCourseA3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
cbind.data.frame(dataSubsetNoNA[,2], dataSubsetNoNA[,1])
order(cbind.data.frame(dataSubsetNoNA[,2], dataSubsetNoNA[,1]))
View(dataSubsetNoNA)
order(dataSubsetNoNA[,2], dataSubsetNoNA[,1])
debugSource('~/Documents/RProgrammingCourseA3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
View(dataSubset)
submit()
submit()
submit()
submit()
View(data)
dataSubset <- data[, c(7, 2, 11)]
str(dataSubset)
dataSubset[, 3] <- suppressWarnings(as.numeric(dataSubset[, 3]))
str(dataSubset)
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
str(dataSubset)
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
View(dataSubsetNoNA)
View(dataSubsetNoNA)
View(dataSubsetOrdered)
View(dataSubsetOrdered)
View(dataSubsetNoNA)
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(dataSubsetNoNA[, 1], dataSubsetNoNA[, 3], dataSubsetNoNA[, 2]),]
View(dataSubsetNoNAOrdered)
View(dataSubsetNoNAOrdered)
result <- tapply(dataSubsetNoNAOrdered, INDEX=dataSubsetNoNAOrdered$State, FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
result <- by(dataSubsetNoNAOrdered, INDEX=dataSubsetNoNAOrdered$State, FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
result <- by(dataSubsetNoNAOrdered, INDICES=dataSubsetNoNAOrdered$State, FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
str(result)
result2 <- as.data.frame(result)
result[[1]]
result[[1]][1]
head(result)
result$AK
dataSubsetNoNAOrdered[,3]
result <- by(dataSubsetNoNAOrdered, INDICES=dataSubsetNoNAOrdered$State, FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
result <- by(dataSubsetNoNAOrdered, INDICES=State, FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
result <- by(dataSubsetNoNAOrdered, INDICES=dataSubsetNoNAOrdered[, 1], FUN=rank, x=dataSubsetNoNAOrdered[,3], ties.method="first")
result$AK
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
rm(result)
result <- by(dataSubsetNoNA, INDICES=dataSubsetNoNA[, 1], FUN=rank, x=dataSubsetNoNA[,3], ties.method="first")
result$AK
result <- by(dataSubsetNoNAOrdered, INDICES=dataSubsetNoNAOrdered[, 1], FUN=function(x) rank(x), x=dataSubsetNoNAOrdered[,3], ties.method="first")
result <- by(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
result
as.data.frame(result)
result[1]
class(result[1])
as.vector(result[1])
class(as.vector(result[1]))
result2 <- lapply(result, rbind)
result2
result2 <- sapply(result, rbind)
result2
result2 <- sapply(result)
result2 <- simplify2array(result)
result2
class(result)
class(result[1])
class(result[1][[1]])
sapply(result[1])
sapply(result[1], as.numeric)
nrow(result[1])
sapply(result[1], as.vector)
sapply(result[1:2], as.vector)
result[1:2]
result2 <- sapply(result[1], as.vector)
class(result2)
result2
result2 <- sapply(result[1:2], as.vector)
result2
class(result2)
result <- tapply(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
class(result)
head(result)
nrows(result)
nrow(result)
sapply(result[1:2], rbind)
class(sapply(result[1:2], rbind))
result[1]
transpose(result[1])
class(sapply(result[1:2], cbind))
sapply(result[1:2], cbind)
class(result)
result2 <- as.data.frame(result)
result2
View(result2)
View(result2)
dim(Result)
dim(result)
result[1]
rbind.data.frame(result[1:2])
cbind.data.frame(result[1:2])
result[1]
result$AK
result[,"AK"]
result["AK"]
result2 <- result[1]
result2
result2 <- cbind(result[1])
result2
result2 <- rbind(result[1])
result2
as.table(result)
result2 <- as.table(result)
result2
result3 <- as.data.frame(result2)
result3 <- data.frame(result2)
result3 <- data.frame(result)
result
View(result3)
View(result3)
result <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
result[1]
class[result1]
class(result[1])
result[1][[1]]
class(result[1][[1]])
class(result[1][[0]])
class(result[1][[2]])
result[1][[1]][[1]]
result[1][[1]][2,]
result[1][[1]][20,]
result$AK
result("AK")
result["AK"]
result["AK"][[1]][2,1]
result[1]
names(result)
n <- names(result)
x <- as.data.frame(names(result))
x
result <- rbind.data.frame(cbind.data.frame(result[x[1]][[1]][2,1], x[1]))
s <- x[1]
s
s <- names(result)
s
result["AK"][[1]][2,1]
result[s][[1]][2,1]
h <- result[s][[1]][2,1]
x
x <- cbind.data.frame(h, s)
x
rm(x)
x <- cbind.data.frame(h, s)
x
rm()
rm(x)
s
s[1]
x <- cbind.data.frame(h, s[1])
x
for(state in names(result)) {}
head(result)
state <- "AK"
splitData <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
splitData[state]
splitData[state][[1]]
splitData[state][[1]]
as.data.frame(names(splitData))
rankall <- function(outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
stateIndex <- 7
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return a data frame with the hospital names and the
## (abbreviated) state names
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[, c(stateIndex, hospitalNameIndex, dataIndex)]
dataSubset[, 3] <- suppressWarnings(as.numeric(dataSubset[, 3]))
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(dataSubsetNoNA[, 1], dataSubsetNoNA[, 3], dataSubsetNoNA[, 2]),]
#         rankings <- by(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
splitData <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
states <- names(splitData)
hospitals <- NULL
for(state in states) {
tempData <- splitData[state][[1]]
if(num == "best") {
rowIndex <- 1
} else if(num == "worst") {
rowIndex <- nrow(tempData)
} else {
rowIndex <- num
}
hospitals <- rbind.data.frame(splitData[rowIndex, 1])
}
result <- cbind.data.frome(hospitals, as.data.frame(states))
}
rankall <- function(outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
stateIndex <- 7
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return a data frame with the hospital names and the
## (abbreviated) state names
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[, c(stateIndex, hospitalNameIndex, dataIndex)]
dataSubset[, 3] <- suppressWarnings(as.numeric(dataSubset[, 3]))
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(dataSubsetNoNA[, 1], dataSubsetNoNA[, 3], dataSubsetNoNA[, 2]),]
#         rankings <- by(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
splitData <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
states <- names(splitData)
hospitals <- NULL
for(state in states) {
tempData <- splitData[state][[1]]
if(num == "best") {
rowIndex <- 1
} else if(num == "worst") {
rowIndex <- nrow(tempData)
} else {
rowIndex <- num
}
hospitals <- rbind.data.frame(splitData[rowIndex, 1])
}
result <- cbind.data.frome(hospitals, as.data.frame(states))
colnames(result) <- c("hospital", "state")
result
}
debug(rankall)
head(rankall("heart attack", 20), 10)
View(tempData)
rankall <- function(outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
stateIndex <- 7
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return a data frame with the hospital names and the
## (abbreviated) state names
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[, c(stateIndex, hospitalNameIndex, dataIndex)]
dataSubset[, 3] <- suppressWarnings(as.numeric(dataSubset[, 3]))
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(dataSubsetNoNA[, 1], dataSubsetNoNA[, 3], dataSubsetNoNA[, 2]),]
#         rankings <- by(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
splitData <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
states <- names(splitData)
#         hospitals <- NULL
for(state in states) {
tempData <- splitData[state][[1]]
if(num == "best") {
rowIndex <- 1
} else if(num == "worst") {
rowIndex <- nrow(tempData)
} else {
rowIndex <- num
}
hospital <- splitData[rowIndex, 1]
hospitals <- rbind.data.frame(hospital)
}
result <- cbind.data.frome(hospitals, as.data.frame(states))
colnames(result) <- c("hospital", "state")
result
}
debug(rankall)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Set some values to be used below
hospitalNameIndex <- 2
stateIndex <- 7
validOutcome <- c("heart attack", "heart failure", "pneumonia")
dataColumns <- c(11, 17, 23)
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
outcomeIndex <- match(outcome, validOutcome)
if(is.na(outcomeIndex)) {
stop("invalid outcome")
}
## Return a data frame with the hospital names and the
## (abbreviated) state names
dataIndex <- dataColumns[outcomeIndex]
dataSubset <- data[, c(stateIndex, hospitalNameIndex, dataIndex)]
dataSubset[, 3] <- suppressWarnings(as.numeric(dataSubset[, 3]))
dataSubset[, 1] <- suppressWarnings(as.factor(dataSubset[, 1]))
dataSubsetNoNA <- dataSubset[which(is.na(dataSubset[, 3]) == FALSE),]
dataSubsetNoNAOrdered <- dataSubsetNoNA[order(dataSubsetNoNA[, 1], dataSubsetNoNA[, 3], dataSubsetNoNA[, 2]),]
#         rankings <- by(dataSubsetNoNAOrdered[, 3], dataSubsetNoNAOrdered[, 1], rank, ties.method="first")
splitData <- split(dataSubsetNoNAOrdered[, 2:3], dataSubsetNoNAOrdered[, 1], )
states <- names(splitData)
#         hospitals <- NULL
for(state in states) {
tempData <- splitData[state][[1]]
if(num == "best") {
rowIndex <- 1
} else if(num == "worst") {
rowIndex <- nrow(tempData)
} else {
rowIndex <- num
}
hospital <- tempData[rowIndex, 1]
hospitals <- rbind.data.frame(hospital)
}
result <- cbind.data.frome(hospitals, as.data.frame(states))
colnames(result) <- c("hospital", "state")
result
}
debug(rankall)
head(rankall("heart attack", 20), 10)
View(hospitals)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
head(rankall("heart attack", 20), 10)
View(hospitals)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
head(rankall("heart attack", 20), 10)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
head(rankall("heart attack", 20), 10)
View(hospitals)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
rankall("heart attack", 20)
View(hospitals)
rankall("heart attack", 2)
View(hospitals)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
rankall("heart attack", 2)
debugSource('~/Documents/RProgrammingCourseA3/rankall.R')
rankall("heart attack", 2)
source('~/Documents/RProgrammingCourseA3/rankall.R')
head(rankall("heart attack", 20),10)
source('~/Documents/RProgrammingCourseA3/rankall.R')
head(rankall("heart attack", 20),10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
